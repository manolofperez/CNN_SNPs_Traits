IBDInd<-c(0.678)
IBDPop<-c(0.536)
wilcox.test(IBDInd,IBDPop, alternative="h",exact=F)
wilcox.test(IBDInd,IBDPop, alternative="g",exact=F)
wilcox.test(IBDInd,IBDPop, alternative="l",exact=F)
wilcox.test(IBDInd,IBDPop,exact=F)
wilcox.test(IBDInd,IBDPop, alternative="g",exact=F)
IBDmammrept<-c(0.686, 0.667)
IBDarthplant<-c(0.553,0.507)
wilcox.test(IBDmammrept,IBDarthplant, alternative="g",exact=F)
IBDmammrept<-c(0.686)
, 0.667)
IBDarthplant<-c(0.507)
0.553,
wilcox.test(IBDmammrept,IBDarthplant, alternative="g",exact=F)
IBDterrfresh<-c(0.68, 0.667)
IBDmariflyt<-c(0.563,0.52)
wilcox.test(IBDterrfresh,IBDmariflyt, alternative="g",exact=F)
IBDpoikilo<-c(0.611)
IBDhomeo<-c(0.647)
wilcox.test(IBDhomeo,IBDpoikilo, alternative="g",exact=F)
IBDmammreptamph<-c(0.686, 0.667,0.63)
IBDarthplantbird<-c(0.553,0.507,0.562)
wilcox.test(IBDmammreptamph,IBDarthplantbird, alternative="g",exact=F)
IBDInd<-c(0.678)
IBDPop<-c(0.536)
wilcox.test(IBDInd,IBDPop, alternative="g",exact=F)
IBDmammreptamph<-c(0.686, 0.667,0.63)
IBDarthplantbird<-c(0.553,0.507,0.562)
wilcox.test(IBDmammreptamph,IBDarthplantbird, alternative="g",exact=F)
IBDterrfresh<-c(0.68, 0.667)
IBDmariflyt<-c(0.563,0.52)
wilcox.test(IBDterrfresh,IBDmariflyt, alternative="g",exact=F)
IBDpoikilo<-c(0.611)
IBDhomeo<-c(0.647)
wilcox.test(IBDhomeo,IBDpoikilo, alternative="g",exact=F)
library(coala)
install.packages("coala")
library(coala)
model <- coal_model(c(2, 3, 4), 2) +
feat_mutation(5) +
feat_migration(1, symmetric = TRUE) +
sumstat_jsfs("jsfs_12", populations = c(1, 2)) +
sumstat_jsfs("jsfs_123", populations = c(1, 2, 3))
stats <- simulate(model)
print(stats$jsfs_12)
print(stats$jsfs_123)
sumstat= c(sum(stats$jsfs_12)[1, ]), sum(stats$jsfs_12)[, 1]), sum(stats$jsfs_12)[-1, -1]))
sumstat= c(sum(jsfs_12)[1, ]), sum(jsfs_12)[, 1]), sum(jsfs_12)[-1, -1]))
sumstat= c(sum(jsfs_12[1, ]), sum(jsfs_12[, 1]), sum(jsfs_12[-1, -1]))
sumstat= c(sum(stats$jsfs_12[1, ]), sum(stats$jsfs_12[, 1]), sum(stats$jsfs_12[-1, -1]))
sumstat
model <- coal_model(c(10, 10), 1) +
feat_mutation(par_prior("theta", rnorm(1, 5, .5))) +
feat_migration(par_prior("m", rnorm(1, .5, .1)), symmetri = TRUE) +
sumstat_jsfs(transformation = function(jsfs) {
c(sum(jsfs[1, ]), sum(jsfs[, 1]), sum(jsfs[-1, -1]))
})
sim_results <- simulate(model, nsim = 2)
abc_sumstat <- create_abc_sumstat(sim_results, model)
print(abc_sumstat)
View(abc_sumstat)
stats$jsfs_12[1, ]
stats$jsfs_12
jsfs
stats$jsfs
stats$jsfs_12[, 1]
stats$jsfs_12[-1, 11]
stats$jsfs_12[-1, -1]
sumstat = c(sum(stats$jsfs_12[1, ]), sum(stats$jsfs_12[, 1]), sum(stats$jsfs_12[-1, -1]))
sumstat
install.packages("diveRsity")
library("invgamma");
a=0.6;b=0.001;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.001;
curve(dinvgamma(x, a, b),from=0,to=0.01)
qinvgamma(c(0.025, 0.975), a, b)
aa=1; bb=10;
curve(dgamma(x, aa, bb), from=0, to=0.01)
qgamma(c(0.025, 0.975), aa, bb)
a=5;b=0.001;
curve(dinvgamma(x, a, b),from=0,to=0.01)
qinvgamma(c(0.025, 0.975), a, b)
a=1;b=0.001;
curve(dinvgamma(x, a, b),from=0,to=0.01)
qinvgamma(c(0.025, 0.975), a, b)
a=1;b=0.0001;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.1;
curve(dinvgamma(x, a, b),from=0,to=0.01)
qinvgamma(c(0.025, 0.975), a, b)
a=1;b=0.01;
curve(dinvgamma(x, a, b),from=0,to=0.01)
qinvgamma(c(0.025, 0.975), a, b)
aa=1; bb=10;
curve(dgamma(x, aa, bb), from=0, to=0.01)
aa=1; bb=15;
curve(dgamma(x, aa, bb), from=0, to=0.01)
aa=1; bb=100;
curve(dgamma(x, aa, bb), from=0, to=0.01)
a=1;b=0.01;
curve(dinvgamma(x, a, b),from=0,to=0.01)
qinvgamma(c(0.025, 0.975), a, b)
aa=1; bb=100;
curve(dgamma(x, aa, bb), from=0, to=0.01)
qgamma(c(0.025, 0.975), aa, bb)
aa=1; bb=10;
curve(dgamma(x, aa, bb), from=0, to=0.01)
qgamma(c(0.025, 0.975), aa, bb)
a=1;b=0.01;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.05;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.01;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.05;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.1;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.001;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.0001;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.001;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.005;
curve(dinvgamma(x, a, b),from=0,to=0.01)
qinvgamma(c(0.025, 0.975), a, b)
a=1;b=0.008;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.009;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.0095;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.004;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.0045;
curve(dinvgamma(x, a, b),from=0,to=0.01)
a=1;b=0.003;
curve(dinvgamma(x, a, b),from=0,to=0.01)
qinvgamma(c(0.025, 0.975), a, b)
a=1;b=0.002;
curve(dinvgamma(x, a, b),from=0,to=0.01)
qinvgamma(c(0.025, 0.975), a, b)
a=1;b=0.005;
curve(dinvgamma(x, a, b),from=0,to=0.01)
qinvgamma(c(0.025, 0.975), a, b)
a=1;b=0.007;
curve(dinvgamma(x, a, b),from=0,to=0.01)
qinvgamma(c(0.025, 0.975), a, b)
aa=1; bb=10;
curve(dgamma(x, aa, bb), from=0, to=0.01)
qgamma(c(0.025, 0.975), aa, bb)
a=1;b=0.008
curve(dinvgamma(x, a, b),from=0,to=0.01)
qinvgamma(c(0.025, 0.975), a, b)
aa=1; bb=10;
curve(dgamma(x, aa, bb), from=0, to=0.01)
qgamma(c(0.025, 0.975), aa, bb)
?rmvnorm
library(ape)
library(caper)
library(phytools)
library(diversitree)
?rmvnorm
?sim.character
setwd("/Users/manolo/Desktop/SimulateTraits/test")
nsim <- 10 # Number of traits to simulate per tree per treeset
trees <- read.tree("trees.txt")
setwd("/Users/manolo/Desktop/SimulateTraits/CNN_SNPs_Trais/test")
setwd("/Users/manolo/Desktop/SimulateTraits/test/CNN_SNPs_Trais")
trees <- read.tree("trees.txt")
for(j in 1:length(trees)) {
tree <- trees[[j]]
# Trait simulations
statecols <- vector()
for(k in 1:nsim) {
states <- sim.character(tree, c(0.1,0.1), x0=0, model="mk2")
states[states == 0] <- rnorm(length(states[states == 0]), mean = 0, sd = 2) # Normal dist. for state 0
states[states == 1] <- rnorm(length(states[states == 1]), mean = 5, sd = 4) # Normal dist. for state 1
statecols <- c(statecols, states[tree$tip.label])
}
sims <- matrix(unlist(statecols), ncol=nsim)
rownames(sims) <- tree$tip.label
new_sims <- sims[ order(as.numeric(row.names(sims))), ]
write.table(as.matrix(new_sims), paste0("./traits/discrete/", j, ".txt"),row.names=F,col.names=F)
}
tree <- trees[[j]]
statecols <- vector()
states <- sim.character(tree, c(0.1,0.1), x0=0, model="mk2")
states
states[states == 0] <- rnorm(length(states[states == 0]), mean = 0, sd = 2) # Normal dist. for state 0
states
states[states == 1] <- rnorm(length(states[states == 1]), mean = 5, sd = 4) # Normal dist. for state 1
states
statecols <- c(statecols, states[tree$tip.label])
statecols
statecols
# Trait simulations
statecols <- vector()
states <- sim.character(tree, c(0.1,0.1), x0=0, model="mk2")
states
states[states == 0] <- rnorm(length(states[states == 0]), mean = 0, sd = 2) # Normal dist. for state 0
states[states == 1] <- rnorm(length(states[states == 1]), mean = 5, sd = 4) # Normal dist. for state 1
states
statecols
states[tree$tip.label]
tree$tip.label
statecols
statecols
states
states <- sim.character(tree, c(0.1,0.1), x0=0, model="mk2")
states
states[states == 0] <- rnorm(length(states[states == 0]), mean = 0, sd = 2) # Normal dist. for state 0
states[states == 1] <- rnorm(length(states[states == 1]), mean = 5, sd = 4) # Normal dist. for state 1
states
states <- sim.character(tree, c(0.1,0.1), x0=0, model="mk2")
states
states[states == 0] <- rnorm(length(states[states == 0]), mean = 0, sd = 2) # Normal dist. for state 0
states
states <- sim.character(tree, c(0.1,0.1,0.1), x0=0, model="mkn")
qq <- list(rbind(c(-.5, .5), c(.5, -.5)), rbind(c(-.05, .05), c(.05, -.05)))
msims <- sim.char(geo$phy, qq, model="discrete")
library(geiger)
# Script By: Manolo Perez - Modified from Michael Harvey
# A script to simulate continuous traits on several newick trees saved in a file.
install/packages("geiger")
# Script By: Manolo Perez - Modified from Michael Harvey
# A script to simulate continuous traits on several newick trees saved in a file.
install.packages("geiger")
msims <- sim.char(geo$phy, qq, model="discrete")
library(geiger)
msims <- sim.char(geo$phy, qq, model="discrete")
msims <- sim.char(tree, qq, model="discrete")
msims
qq <- list(rbind(c(-.5, .5), c(.5, -.5))
msims <- sim.char(tree, qq, model="discrete")
statecols <- c(statecols, states[tree$tip.label])
}
sims <- matrix(unlist(statecols), ncol=nsim)
rownames(sims) <- tree$tip.label
new_sims <- sims[order(as.numeric(row.names(sims))), ]
write.table(as.matrix(new_sims), paste0("./traits/discrete/", j, ".txt"),row.names=F,col.names=F)
}
# OU process (strong)
trees <- read.tree("trees.txt")
for(j in 1:length(trees)) {
tree <- trees[[j]]
# Trait simulations
sims <- fastBM(tree, a = 0, sig2 = 0.06, alpha = 0.2, theta = 0, nsim = nsim)
new_sims <- sims[ order(as.numeric(row.names(sims))), ]
write.table(as.matrix(new_sims), paste0("./traits/OUstrong/", j, ".txt"),row.names=F,col.names=F)
}
# OU process (weak)
trees <- read.tree("trees.txt")
for(j in 1:length(trees)) {
tree <- trees[[j]]
# Trait simulations
sims <- fastBM(tree, a = 0, sig2 = 0.06, alpha = 0.002, theta = 0, nsim = nsim)
new_sims <- sims[ order(as.numeric(row.names(sims))), ]
write.table(as.matrix(new_sims), paste0("./traits/OUweak/", j, ".txt"),row.names=F,col.names=F)
}
qq <- list(rbind(c(-.5, .5), c(.5, -.5)))
qq <- list(rbind(c(-.5, .5), c(.5, -.5)))
msims <- sim.char(tree, qq, model="discrete")
msims
statecols
# Trait simulations
statecols <- vector()
statecols <- c(statecols, states[tree$tip.label])
statecols
# Trait simulations
statecols <- vector()
statecols
statecols <- c(statecols, msims[tree$tip.label])
statecols
# Trait simulations
statecols <- vector()
statecols <- c(statecols, msims)
statecols
rownames(sims) <- tree$tip.label
sims
# Trait simulations
statecols <- vector()
for(k in 1:nsim) {
qq <- list(rbind(c(-.5, .5), c(.5, -.5)))
msims <- sim.char(tree, qq, model="discrete")
statecols <- c(statecols, msims)
}
sims <- matrix(unlist(statecols), ncol=nsim)
sims
rownames(sims) <- tree$tip.label
sims
new_sims <- sims[order(as.numeric(row.names(sims))), ]
new_sims
?fastBM
